---
title: "Monte Carlo On a Desert Island"
subtitle: "Core Empirical Research Methods - Summer Work"
author: "Toby Wang"
date: "Jul 15, 2023"
format: html
geometry:
  - top=30mm
  - left=20mm
  - heightrounded
editor: visual
---

```{r, include = FALSE}
library(tidyverse)
library(janitor)
library(broom)
library(car)
library(ggplot2)
library(modelsummary)
library(gapminder)
library(gridExtra)
library(tidyr)
```

## Q1

### a)

```{r}
runif_zx81 <- function(seed, n, min, max) {
  # Setting the parameters and initial seed
  m <- 2^16 + 1
  a <- 75
  x <- seed

  # Generating an empty vector
  random_numbers <- numeric(n)

  # Writing a for loop to calculate each value using the Lehmer formula, scaling the value, then storing it in the random_numbers matrix
  for (i in 1:n) {
    x <- (a * x) %% m  
    x_scale <- min + (max - min) * (x / m)  
    random_numbers[i] <- x_scale
  }
  
  random_numbers
}
```

### b)

Testing for this *runif* generator

```{r}
unif_sim <- runif_zx81(69, 1000, 0, 10)
mean(unif_sim)
```

On first glance just by taking the mean it seems like this would apprach the mean for a similar uniform distribution. Making a histogram:

```{r}
tibble(unif_sim) |>
  ggplot(aes(x = unif_sim)) +
  geom_histogram(bins = 30) +
  labs(x = "Values of Draws", y = "Number of occurances", title = "Histogram of runif_ZX81 Random Draws")
```

This seems reasonably uniformly distributed except the end points, take less values than the other values. Now making a qqplot:

```{r}
tibble(x = unif_sim) |>
  ggplot(aes(sample = x)) +
  geom_qq(distribution = qunif)+
  geom_qq_line(col = "red", distribution = qunif) +
  geom_abline(slope = 1, intercept = 0, col = "blue") +
  labs(title = "QQ Plot of runif_ZX81 Random Draws")
```

This simulation has the same distribution as the uniform distribution as they are on the same line (red line), which means the quantiles of the observed data agree with those of a transformed uniform distribution. If we standardize the data before making such a plot (making the min and max (0,1)), then we get a 45 degree line (blue line):

```{r}
unif_sim_sd <- runif_zx81(69, 1000, 0, 1)
tibble(x = unif_sim_sd) |>
  ggplot(aes(sample = x)) +
  geom_qq(distribution = qunif)+
  geom_qq_line(col = "red", distribution = qunif) +
  geom_abline(slope = 1, intercept = 0, col = "blue") +
  labs(title = "Normalized QQ Plot of runif_ZX81 Random Draws")
```

Now making the time-series plot:

```{r}
tibble(Index = 1:1000, Value = unif_sim) |>
ggplot(aes(x = Index, y = Value)) +
  geom_line() +
  labs(x = "Index of Draw", y = "Value of Draw", title = "Time Series Plot of runif_ZX81 Random Draws")
```

There does not seem to be any clustering or gaps, the variance around 5 all seem constant and pure noise without much persistence.

## Q2

### a)

We first need to create two independent uniform RV from two different seeds to make sure that they are indepdnent of one another. This is becasue the same seed number affects the sequence of psedo-random numbers generated by the ZX81 random number generator. We end up just having to use one of the two standard normal simulations:

```{r}
rnorm_zx81 <- function(seed, n, mean, sd) {
  u1 <- runif_zx81(seed +1, n, 0, 1)
  u2 <- runif_zx81(seed, n, 0, 1)
  R <- sqrt(-2 * log(u1))
  theta <- 2 * pi * u2
  z1 <- R * cos(theta) 
  z1
}
rnorm_zx81(69, 10, 0, 1)
```

### b)

```{r}
norm_sim <- rnorm_zx81(69, 1000, 0, 1)
mean(norm_sim)
sd(norm_sim)
```

At first glance the mean and standard deviation seems reasonable given a large sample size. Let's make some plots similar to the first question of this worksheet.

```{r}
tibble(norm_sim) |>
  ggplot(aes(x = norm_sim)) +
  geom_histogram(bins = 30) +
  labs(x = "Values of the Simulation", y = "Number of Draws", title = "Histogram of rnorm_ZX81 Random Draws")
```

**Note to self: it is very frustrating that I do not know how to overlay a normally distributed curve on this histogram (nothing seems to work)**

```{r}
tibble(x = norm_sim) |>
  ggplot(aes(sample = x)) +
  geom_qq()+
  geom_abline(slope = 1, intercept = 0, col = "blue") +
  labs(title = "QQ Plot of rnorm_ZX81 Random Draws")
```

Overall this lines up with the 45 degree line well for values of x from \[-2,2\].

```{r}
tibble(Index = 1:1000, Value = norm_sim) |>
ggplot(aes(x = Index, y = Value)) +
  geom_line() +
  labs(x = "Index of Draw", y = "Value of Draw", title = "Time Series Plot of rnorm_ZX81 Random Draws")
```

Overall this time series plot centers around 0, has constant variance and at no point are the values persistently higher or lower than 0.
